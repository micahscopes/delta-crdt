// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Map from "bs-platform/lib/es6/map.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";

function Make(Id) {
  var State = $$Map.Make(Id);
  var stateOfJoinable = function (x) {
    if (x.tag) {
      return x[0];
    } else {
      return x[1];
    }
  };
  var replica = function (id) {
    return /* Replica */Block.__(0, [
              id,
              Curry._3(State.add, id, 0, State.empty)
            ]);
  };
  var value = function (j) {
    return Curry._3(State.fold, (function (param, v, accum) {
                  return v + accum | 0;
                }), stateOfJoinable(j), 0);
  };
  var increment = function (replica) {
    var state = replica[1];
    var id = replica[0];
    var newValue = Curry._2(State.find, id, state) + 1 | 0;
    var delta = /* Delta */Block.__(1, [Curry._3(State.add, id, newValue, State.empty)]);
    var state$1 = Curry._3(State.add, id, newValue, state);
    return /* tuple */[
            /* Replica */Block.__(0, [
                id,
                state$1
              ]),
            delta
          ];
  };
  var join = function (joinableA, joinableB) {
    var mergedState = Curry._3(State.merge, (function (param) {
            return Caml_obj.caml_max;
          }), stateOfJoinable(joinableA), stateOfJoinable(joinableB));
    if (joinableA.tag) {
      return /* Delta */Block.__(1, [mergedState]);
    } else {
      return /* Replica */Block.__(0, [
                joinableA[0],
                mergedState
              ]);
    }
  };
  return {
          State: State,
          stateOfJoinable: stateOfJoinable,
          replica: replica,
          value: value,
          increment: increment,
          join: join
        };
}

export {
  Make ,
  
}
/* No side effect */
