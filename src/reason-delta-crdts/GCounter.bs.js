// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Map from "bs-platform/lib/es6/map.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Crdt$DeltaCrdts from "./Crdt.bs.js";

function State(Data) {
  var join = function (p, q) {
    return Curry._3(Data.merge, (function (param) {
                  return Caml_obj.caml_max;
                }), p, q);
  };
  return {
          empty: Data.empty,
          join: join
        };
}

function Make(Id) {
  var Data = $$Map.Make(Id);
  var empty = Data.empty;
  var join = function (p, q) {
    return Curry._3(Data.merge, (function (param) {
                  return Caml_obj.caml_max;
                }), p, q);
  };
  var State = {
    empty: empty,
    join: join
  };
  var partial_arg = Crdt$DeltaCrdts.Make;
  var include = partial_arg(Id, State);
  var replica = function (id) {
    return {
            id: Caml_option.some(id),
            state: Curry._3(Data.add, id, 0, empty)
          };
  };
  var value = function (patch) {
    return Curry._3(Data.fold, (function (param, v, accum) {
                  return v + accum | 0;
                }), patch.state, 0);
  };
  var increment = function (replica) {
    var id = replica.id;
    if (id === undefined) {
      return /* Invalid */Block.__(1, [replica]);
    }
    var state = replica.state;
    var id$1 = Caml_option.valFromOption(id);
    var newValue = Curry._2(Data.find, id$1, state) + 1 | 0;
    var delta = Curry._3(Data.add, id$1, newValue, empty);
    var state$1 = Curry._3(Data.add, id$1, newValue, state);
    return /* Result */Block.__(0, [
              /* replica */{
                id: Caml_option.some(id$1),
                state: state$1
              },
              /* delta */{
                id: undefined,
                state: delta
              }
            ]);
  };
  return {
          Data: Data,
          State: State,
          join: include.join,
          initialValue: 0,
          replica: replica,
          value: value,
          increment: increment
        };
}

export {
  State ,
  Make ,
  
}
/* No side effect */
