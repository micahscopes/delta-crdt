// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as CrdtCore$DeltaCrdts from "./CrdtCore.bs.js";

function Make(Id) {
  var include = CrdtCore$DeltaCrdts.Make(Id);
  var empty = include.empty;
  var add = include.add;
  var fold = include.fold;
  var find = include.find;
  var replica = function (id) {
    return {
            id: Caml_option.some(id),
            state: Curry._3(add, id, 0, empty)
          };
  };
  var value = function (patch) {
    return Curry._3(fold, (function (param, v, accum) {
                  return v + accum | 0;
                }), patch.state, 0);
  };
  var increment = function (replica) {
    var id = replica.id;
    if (id === undefined) {
      return /* Invalid */Block.__(1, [replica]);
    }
    var state = replica.state;
    var id$1 = Caml_option.valFromOption(id);
    var newValue = Curry._2(find, id$1, state) + 1 | 0;
    var delta = Curry._3(add, id$1, newValue, empty);
    var state$1 = Curry._3(add, id$1, newValue, state);
    return /* Result */Block.__(0, [
              /* replica */{
                id: Caml_option.some(id$1),
                state: state$1
              },
              /* delta */{
                id: undefined,
                state: delta
              }
            ]);
  };
  return {
          State: include.State,
          empty: empty,
          is_empty: include.is_empty,
          mem: include.mem,
          add: add,
          update: include.update,
          singleton: include.singleton,
          remove: include.remove,
          merge: include.merge,
          union: include.union,
          compare: include.compare,
          equal: include.equal,
          iter: include.iter,
          fold: fold,
          for_all: include.for_all,
          exists: include.exists,
          filter: include.filter,
          partition: include.partition,
          cardinal: include.cardinal,
          bindings: include.bindings,
          min_binding: include.min_binding,
          min_binding_opt: include.min_binding_opt,
          max_binding: include.max_binding,
          max_binding_opt: include.max_binding_opt,
          choose: include.choose,
          choose_opt: include.choose_opt,
          split: include.split,
          find: find,
          find_opt: include.find_opt,
          find_first: include.find_first,
          find_first_opt: include.find_first_opt,
          find_last: include.find_last,
          find_last_opt: include.find_last_opt,
          map: include.map,
          mapi: include.mapi,
          join: include.join,
          replica: replica,
          value: value,
          increment: increment
        };
}

export {
  Make ,
  
}
/* No side effect */
