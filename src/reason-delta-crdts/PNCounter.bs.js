// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Map from "bs-platform/lib/es6/map.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Crdt$DeltaCrdts from "./Crdt.bs.js";
import * as GCounter$DeltaCrdts from "./GCounter.bs.js";

function State(Id) {
  var Data = $$Map.Make(Id);
  var Positive = GCounter$DeltaCrdts.State(Data);
  var Negative = GCounter$DeltaCrdts.State(Data);
  var partial_arg = Crdt$DeltaCrdts.Pair;
  var include = partial_arg(Positive, Negative);
  var increment = function (id, param) {
    return /* tuple */[
            Curry._2(Positive.increment, param[0], id),
            Negative.empty
          ];
  };
  var decrement = function (id, param) {
    return /* tuple */[
            Positive.empty,
            Curry._2(Negative.increment, param[1], id)
          ];
  };
  var value = function (param) {
    return Curry._1(Positive.value, param[0]) - Curry._1(Negative.value, param[1]) | 0;
  };
  return {
          Data: Data,
          Positive: Positive,
          Negative: Negative,
          empty: include.empty,
          join: include.join,
          increment: increment,
          decrement: decrement,
          value: value
        };
}

function Make(Id) {
  var Data = $$Map.Make(Id);
  var Positive = GCounter$DeltaCrdts.State(Data);
  var Negative = GCounter$DeltaCrdts.State(Data);
  var partial_arg = Crdt$DeltaCrdts.Pair;
  var include = partial_arg(Positive, Negative);
  var empty = include.empty;
  var join = include.join;
  var increment = function (id, param) {
    return /* tuple */[
            Curry._2(Positive.increment, param[0], id),
            Negative.empty
          ];
  };
  var decrement = function (id, param) {
    return /* tuple */[
            Positive.empty,
            Curry._2(Negative.increment, param[1], id)
          ];
  };
  var value = function (param) {
    return Curry._1(Positive.value, param[0]) - Curry._1(Negative.value, param[1]) | 0;
  };
  var State = {
    Data: Data,
    Positive: Positive,
    Negative: Negative,
    empty: empty,
    join: join,
    increment: increment,
    decrement: decrement,
    value: value
  };
  var partial_arg$1 = Crdt$DeltaCrdts.Make;
  var include$1 = partial_arg$1(Id, {
        empty: empty,
        join: join
      });
  var mutate = include$1.mutate;
  var replica = function (id) {
    return {
            id: Caml_option.some(id),
            state: empty
          };
  };
  var value$1 = function (param) {
    return value(param.state);
  };
  var increment$1 = function (replica) {
    var id = replica.id;
    if (id !== undefined) {
      return Curry._2(mutate, replica, increment(Caml_option.valFromOption(id), replica.state));
    } else {
      return /* Invalid */Block.__(1, [
                /* replica */replica,
                /* delta */undefined
              ]);
    }
  };
  var decrement$1 = function (replica) {
    var id = replica.id;
    if (id !== undefined) {
      return Curry._2(mutate, replica, decrement(Caml_option.valFromOption(id), replica.state));
    } else {
      return /* Invalid */Block.__(1, [
                /* replica */replica,
                /* delta */undefined
              ]);
    }
  };
  return {
          State: State,
          join: include$1.join,
          patchOfState: include$1.patchOfState,
          mutate: mutate,
          replica: replica,
          value: value$1,
          increment: increment$1,
          decrement: decrement$1
        };
}

export {
  State ,
  Make ,
  
}
/* No side effect */
