// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Map from "bs-platform/lib/es6/map.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Crdt$DeltaCrdts from "./Crdt.bs.js";
import * as GCounter$DeltaCrdts from "./GCounter.bs.js";

function Make(Id) {
  var Data = $$Map.Make(Id);
  var Positive = GCounter$DeltaCrdts.State(Data);
  var Negative = GCounter$DeltaCrdts.State(Data);
  var partial_arg = Crdt$DeltaCrdts.Pair;
  var State = partial_arg(Positive, Negative);
  var partial_arg$1 = Crdt$DeltaCrdts.Make;
  var include = partial_arg$1(Id, State);
  var deltaOfState = include.deltaOfState;
  var mutate = include.mutate;
  var replica = function (id) {
    return {
            id: Caml_option.some(id),
            state: State.empty
          };
  };
  var value = function (param) {
    var match = param.state;
    return Curry._1(Positive.value, match[0]) - Curry._1(Negative.value, match[1]) | 0;
  };
  var increment = function (replica) {
    var id = replica.id;
    if (id !== undefined) {
      return Curry._2(mutate, replica, Curry._1(deltaOfState, /* tuple */[
                      Curry._2(Positive.increment, replica.state[0], Caml_option.valFromOption(id)),
                      Negative.empty
                    ]));
    } else {
      return /* Invalid */Block.__(1, [
                /* replica */replica,
                /* delta */undefined
              ]);
    }
  };
  var decrement = function (replica) {
    var id = replica.id;
    if (id !== undefined) {
      return Curry._2(mutate, replica, Curry._1(deltaOfState, /* tuple */[
                      Positive.empty,
                      Curry._2(Negative.increment, replica.state[1], Caml_option.valFromOption(id))
                    ]));
    } else {
      return /* Invalid */Block.__(1, [
                /* replica */replica,
                /* delta */undefined
              ]);
    }
  };
  return {
          Data: Data,
          Positive: Positive,
          Negative: Negative,
          State: State,
          deltaOfState: deltaOfState,
          join: include.join,
          mutate: mutate,
          replica: replica,
          value: value,
          increment: increment,
          decrement: decrement
        };
}

export {
  Make ,
  
}
/* No side effect */
