// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function Make(Id, State) {
  var replica = function (id) {
    return {
            id: id,
            state: State.empty
          };
  };
  var deltaOfState = function (state) {
    return {
            id: undefined,
            state: state
          };
  };
  var join = function (p, q) {
    var match = p.id;
    var match$1 = q.id;
    var id;
    if (match !== undefined) {
      var id$1 = Caml_option.valFromOption(match);
      id = Caml_option.some(id$1);
    } else {
      id = match$1 !== undefined ? Caml_option.some(Caml_option.valFromOption(match$1)) : undefined;
    }
    var state = Curry._2(State.join, p.state, q.state);
    return {
            id: id,
            state: state
          };
  };
  var mutate = function (replica, delta) {
    var match = replica.id;
    var match$1 = delta.id;
    if (match !== undefined && match$1 === undefined) {
      return /* Result */Block.__(0, [
                /* replica */join(replica, delta),
                /* delta */delta
              ]);
    } else {
      return /* Invalid */Block.__(1, [
                /* replica */replica,
                /* delta */delta
              ]);
    }
  };
  return {
          replica: replica,
          deltaOfState: deltaOfState,
          join: join,
          mutate: mutate
        };
}

function Pair(A, B) {
  var empty_000 = A.empty;
  var empty_001 = B.empty;
  var empty = /* tuple */[
    empty_000,
    empty_001
  ];
  var join = function (param, param$1) {
    return /* tuple */[
            Curry._2(A.join, param[0], param$1[0]),
            Curry._2(B.join, param[1], param$1[1])
          ];
  };
  return {
          empty: empty,
          join: join
        };
}

function LexicographicPair(A, B) {
  var empty_000 = A.empty;
  var empty_001 = B.empty;
  var empty = /* tuple */[
    empty_000,
    empty_001
  ];
  var join = function (param, param$1) {
    var b$prime = param$1[1];
    var a$prime = param$1[0];
    var b = param[1];
    var a = param[0];
    var priority = Curry._2(A.compare, a, a$prime);
    switch (priority) {
      case /* Left */0 :
          return /* tuple */[
                  a,
                  b
                ];
      case /* Both */1 :
          return /* tuple */[
                  a,
                  Curry._2(B.join, b, b$prime)
                ];
      case /* Neither */2 :
          return /* tuple */[
                  Curry._2(A.join, a, a$prime),
                  B.empty
                ];
      case /* Right */3 :
          return /* tuple */[
                  a$prime,
                  b$prime
                ];
      
    }
  };
  return {
          empty: empty,
          join: join
        };
}

export {
  Make ,
  Pair ,
  LexicographicPair ,
  
}
/* No side effect */
