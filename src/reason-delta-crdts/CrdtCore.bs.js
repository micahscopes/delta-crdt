// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Map from "bs-platform/lib/es6/map.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function Make(Id) {
  var State = $$Map.Make(Id);
  var merge = State.merge;
  var join = function (p, q) {
    var state = Curry._3(merge, (function (param) {
            return Caml_obj.caml_max;
          }), p.state, q.state);
    var id = p.id;
    if (id !== undefined) {
      var id$1 = Caml_option.valFromOption(id);
      q.id !== undefined;
      return {
              id: Caml_option.some(id$1),
              state: state
            };
    }
    var id$2 = q.id;
    if (id$2 !== undefined) {
      return {
              id: Caml_option.some(Caml_option.valFromOption(id$2)),
              state: state
            };
    } else {
      return {
              id: undefined,
              state: state
            };
    }
  };
  return {
          State: State,
          empty: State.empty,
          is_empty: State.is_empty,
          mem: State.mem,
          add: State.add,
          update: State.update,
          singleton: State.singleton,
          remove: State.remove,
          merge: merge,
          union: State.union,
          compare: State.compare,
          equal: State.equal,
          iter: State.iter,
          fold: State.fold,
          for_all: State.for_all,
          exists: State.exists,
          filter: State.filter,
          partition: State.partition,
          cardinal: State.cardinal,
          bindings: State.bindings,
          min_binding: State.min_binding,
          min_binding_opt: State.min_binding_opt,
          max_binding: State.max_binding,
          max_binding_opt: State.max_binding_opt,
          choose: State.choose,
          choose_opt: State.choose_opt,
          split: State.split,
          find: State.find,
          find_opt: State.find_opt,
          find_first: State.find_first,
          find_first_opt: State.find_first_opt,
          find_last: State.find_last,
          find_last_opt: State.find_last_opt,
          map: State.map,
          mapi: State.mapi,
          join: join
        };
}

export {
  Make ,
  
}
/* No side effect */
