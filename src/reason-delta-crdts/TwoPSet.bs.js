// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Set from "bs-platform/lib/es6/set.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Crdt$DeltaCrdts from "./Crdt.bs.js";
import * as GSet$DeltaCrdts from "./GSet.bs.js";

function Make(Id, $$Element) {
  var Data = $$Set.Make($$Element);
  var AddSet = GSet$DeltaCrdts.State(Data);
  var RemoveSet = GSet$DeltaCrdts.State(Data);
  var partial_arg = Crdt$DeltaCrdts.Pair;
  var State = partial_arg(AddSet, RemoveSet);
  var partial_arg$1 = Crdt$DeltaCrdts.Make;
  var include = partial_arg$1(Id, State);
  var deltaOfState = include.deltaOfState;
  var mutate = include.mutate;
  var replica = function (id) {
    return {
            id: Caml_option.some(id),
            state: State.empty
          };
  };
  var elements = function (param) {
    var match = param.state;
    return Curry._1(Data.elements, Curry._2(Data.diff, match[0], match[1]));
  };
  var insert = function (patch, element) {
    var delta = Curry._1(deltaOfState, /* tuple */[
          Curry._2(Data.add, element, Data.empty),
          Data.empty
        ]);
    return Curry._2(mutate, patch, delta);
  };
  var remove = function (patch, element) {
    var delta = Curry._1(deltaOfState, /* tuple */[
          Data.empty,
          Curry._2(Data.add, element, Data.empty)
        ]);
    return Curry._2(mutate, patch, delta);
  };
  return {
          Data: Data,
          AddSet: AddSet,
          RemoveSet: RemoveSet,
          State: State,
          deltaOfState: deltaOfState,
          join: include.join,
          mutate: mutate,
          replica: replica,
          elements: elements,
          insert: insert,
          remove: remove
        };
}

export {
  Make ,
  
}
/* No side effect */
