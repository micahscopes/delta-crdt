// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Tape from "bs-tape/src/Tape.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as GCounter$DeltaCrdts from "./GCounter.bs.js";

Tape.test("test that we can increment the counter", (function (t) {
        var CounterType = GCounter$DeltaCrdts.Make({
              compare: $$String.compare
            });
        var match = Curry._1(CounterType.increment, Curry._1(CounterType.replica, "micah"));
        var replicaValue = Curry._1(CounterType.value, match[0]);
        Curry._1(t.plan, 1);
        return Curry._2(t.ok, undefined, replicaValue === 1);
      }));

Tape.test("test that we can merge two replicas", (function (t) {
        var CounterType = GCounter$DeltaCrdts.Make({
              compare: $$String.compare
            });
        var alice = Curry._1(CounterType.replica, "alice");
        var bob = Curry._1(CounterType.replica, "bob");
        var match = Curry._1(CounterType.increment, alice);
        var alice$1 = match[0];
        var match$1 = Curry._1(CounterType.increment, bob);
        var dBob = match$1[1];
        var bob$1 = match$1[0];
        Curry._2(t.ok, undefined, Curry._1(CounterType.value, Curry._2(CounterType.join, alice$1, dBob)) === Curry._1(CounterType.value, Curry._2(CounterType.join, bob$1, match[1])));
        Curry._2(t.ok, undefined, Curry._1(CounterType.value, Curry._2(CounterType.join, alice$1, dBob)) === Curry._1(CounterType.value, Curry._2(CounterType.join, alice$1, bob$1)));
        return Curry._1(t.endTest, undefined);
      }));

export {
  
}
/*  Not a pure module */
