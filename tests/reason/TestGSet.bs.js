// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Tape from "bs-tape/src/Tape.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as GSet$DeltaCrdts from "../../src/reason-delta-crdts/GSet.bs.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

Tape.test("test that we can make a GSet and add an element", (function (t) {
        var partial_arg = {
          compare: $$String.compare
        };
        var partial_arg$1 = GSet$DeltaCrdts.Make;
        var GSetType = (function (param) {
              return partial_arg$1(partial_arg, param);
            })({
              compare: $$String.compare
            });
        var el = "hello";
        var expected = Curry._1(GSetType.Data.singleton, el);
        var replica = Curry._1(GSetType.replica, "marge");
        var match = Curry._2(GSetType.insert, replica, el);
        if (match.tag) {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "TestGSet.re",
                  11,
                  6
                ]
              ];
        }
        var arg = t.ok;
        Curry._2(arg, undefined, Curry._2(GSetType.Data.equal, Curry._1(GSetType.elements, match[/* replica */0]), expected));
        return Curry._1(t.endTest, undefined);
      }));

Tape.test("test that we can join deltas/replicas", (function (t) {
        var partial_arg = {
          compare: $$String.compare
        };
        var partial_arg$1 = GSet$DeltaCrdts.Make;
        var GSetType = (function (param) {
              return partial_arg$1(partial_arg, param);
            })({
              compare: $$String.compare
            });
        var alice = Curry._1(GSetType.replica, "alice");
        var bob = Curry._1(GSetType.replica, "bob");
        var marge = Curry._1(GSetType.replica, "marge");
        var match = Curry._2(GSetType.insert, alice, "dog");
        if (match.tag) {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "TestGSet.re",
                  26,
                  6
                ]
              ];
        }
        var dAlice = match[/* delta */1];
        var alice$1 = match[/* replica */0];
        var match$1 = Curry._2(GSetType.insert, bob, "cat");
        if (match$1.tag) {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "TestGSet.re",
                  27,
                  6
                ]
              ];
        }
        var dBob = match$1[/* delta */1];
        var bob$1 = match$1[/* replica */0];
        var checkEqualElements = function (x, y) {
          return Curry._2(GSetType.Data.equal, Curry._1(GSetType.elements, x), Curry._1(GSetType.elements, y));
        };
        var arg = t.ok;
        Curry._2(arg, undefined, checkEqualElements(Curry._2(GSetType.join, alice$1, dBob), Curry._2(GSetType.join, bob$1, dAlice)));
        var arg$1 = t.ok;
        Curry._2(arg$1, undefined, checkEqualElements(Curry._2(GSetType.join, alice$1, dBob), Curry._2(GSetType.join, alice$1, bob$1)));
        var delta = Curry._2(GSetType.join, dAlice, dBob);
        var marge$1 = Curry._2(GSetType.join, marge, delta);
        var arg$2 = t.ok;
        Curry._2(arg$2, undefined, checkEqualElements(marge$1, Curry._2(GSetType.join, alice$1, bob$1)));
        return Curry._1(t.endTest, undefined);
      }));

export {
  
}
/*  Not a pure module */
